<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on یادداشتهای بیت نیمسوز</title>
    <link>http://fzero.rubi.gd/categories/go/</link>
    <description>Recent content in Go on یادداشتهای بیت نیمسوز</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fa-ir</language>
    <lastBuildDate>Sun, 01 May 2016 08:01:37 +0430</lastBuildDate><atom:link href="http://fzero.rubi.gd/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>تزریق! نسخه به باینری وقت کامپایل #Golang</title>
      <link>http://fzero.rubi.gd/post/go/inject-go-version/</link>
      <pubDate>Sun, 01 May 2016 08:01:37 +0430</pubDate>
      
      <guid>http://fzero.rubi.gd/post/go/inject-go-version/</guid>
      <description>بدنیست همیشه یه اطلاعاتی از نسخه برنامه تو دل خودش باشه. مدتهاست که من از Make برای کامپایل برنامه استفاده میکنم، و قبلترها، قبل از اینکه کامپایل کنم برنامه رو، یک فایل میساختم (به صورت اتوماتیک) مثلا با این محتوا :
package main // this file is autogenerated var ( // Commit hash 	hash = &amp;#34;a5df371b88bc3f875f49a3b7e19b55c88cd31487&amp;#34; short = &amp;#34;a5df371&amp;#34; // commit date 	date = &amp;#34;2016-04-30 11:21:46 +0430 +0430&amp;#34; // build date 	build = &amp;#34;2016-04-30 11:21:46 +0430 +0430&amp;#34; // commit count 	count = &amp;#34;42&amp;#34; ) بعد قبل هر کامپایل این فایل مجددا ساخته میشه و متغیرهاش آپدیت میشن.</description>
    </item>
    
    <item>
      <title>go web server on port 80</title>
      <link>http://fzero.rubi.gd/post/go/go-web-server/</link>
      <pubDate>Thu, 14 Apr 2016 17:00:34 +0430</pubDate>
      
      <guid>http://fzero.rubi.gd/post/go/go-web-server/</guid>
      <description>Golang یک کتابخانه عالی http داره که کلی قابلیت بهت میده. مثلا http2 و قابلیت ساپورت رنج روی فایل برای دانلود که تقریبا به سادگی آب خوردن پیاده میشه. من معمولا یه وب سرور میذاشتم سر راهش. یعنی پروکسیش میکردم. مثلا nginx و هنوزم خیلی وقتا اینکار رو میکنم. منتها یه وقتایی هست که کلا نمیخوای درگیر وب سرور خارجی بشی. دلیلش هر چی هست :)‌ و میخوای از سرور خود Golang استفاده کنی.</description>
    </item>
    
    <item>
      <title>اولین کامیتهای پروژه Go</title>
      <link>http://fzero.rubi.gd/post/go/go-first-commit/</link>
      <pubDate>Sat, 02 Apr 2016 23:31:08 +0430</pubDate>
      
      <guid>http://fzero.rubi.gd/post/go/go-first-commit/</guid>
      <description>شوخ طبعی دولوپرها همیشه جالب بوده برام، چون اصولا ندارن و چیزهایی که براشون شوخی حساب میشه رو کسی جز خودشون براش بامزه حساب نمیشه.
این شوخی تیم گو بوده که اولین کامیتهای گو رو اینطوری رقم زده :
لینک اولین کامیت
برای اونها که ممکنه شوخی رو نگرفته باشن، تاریخ و Author اون چهار تا کامیت اول رو ببینید. Brian Kernighan، کسی که اولین Hello World شناخته شده رو تو کتابش داره، تاریخ هم که خیلی قدیمیه، برمیگرده به قبل از زبان C حتی.</description>
    </item>
    
    <item>
      <title>گور بدون مرده - ssh-honeypot</title>
      <link>http://fzero.rubi.gd/post/ssh-honey-pot/</link>
      <pubDate>Fri, 12 Dec 2014 15:55:44 +0330</pubDate>
      
      <guid>http://fzero.rubi.gd/post/ssh-honey-pot/</guid>
      <description>یکی از تکنیکهای امنیتی که بهش هانی‌پات یا همون کندوی عسل هم میگن، اینه که یه سرویس جعلی ایجاد کنی و بعد اونو به جای سرویس اصلی بذاری. این سرویس نباید خیلی سنگین باشه، معمولا پشتش هیچی نیست و هر کاری هم که صورت بگیره آخرش اتفاق خاصی قرار نیست بیفته. اون کسی که قصد نفوذ به سیستم رو داره گیر این تله میفته و به جای اینکه واقعا برسه به سرویس اصلی با یه نسخه احمقانه سرش گرم میشه:)</description>
    </item>
    
  </channel>
</rss>
